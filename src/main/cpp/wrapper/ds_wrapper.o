# 1 "./ds_wrapper.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "./ds_wrapper.cpp"
# 1 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h" 1




extern "C" {
# 18 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
typedef struct ModelState ModelState;

typedef struct StreamingState StreamingState;




typedef struct TokenMetadata {

  const char* const text;


  const unsigned int timestep;


  const float start_time;
} TokenMetadata;





typedef struct CandidateTranscript {

  const TokenMetadata* const tokens;

  const unsigned int num_tokens;




  const double confidence;
} CandidateTranscript;




typedef struct Metadata {

  const CandidateTranscript* const transcripts;

  const unsigned int num_transcripts;
} Metadata;
# 91 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
enum DeepSpeech_Error_Codes
{

DS_ERR_OK = 0x0000, DS_ERR_NO_MODEL = 0x1000, DS_ERR_INVALID_ALPHABET = 0x2000, DS_ERR_INVALID_SHAPE = 0x2001, DS_ERR_INVALID_SCORER = 0x2002, DS_ERR_MODEL_INCOMPATIBLE = 0x2003, DS_ERR_SCORER_NOT_ENABLED = 0x2004, DS_ERR_SCORER_UNREADABLE = 0x2005, DS_ERR_SCORER_INVALID_LM = 0x2006, DS_ERR_SCORER_NO_TRIE = 0x2007, DS_ERR_SCORER_INVALID_TRIE = 0x2008, DS_ERR_SCORER_VERSION_MISMATCH = 0x2009, DS_ERR_FAIL_INIT_MMAP = 0x3000, DS_ERR_FAIL_INIT_SESS = 0x3001, DS_ERR_FAIL_INTERPRETER = 0x3002, DS_ERR_FAIL_RUN_SESS = 0x3003, DS_ERR_FAIL_CREATE_STREAM = 0x3004, DS_ERR_FAIL_READ_PROTOBUF = 0x3005, DS_ERR_FAIL_CREATE_SESS = 0x3006, DS_ERR_FAIL_CREATE_MODEL = 0x3007, DS_ERR_FAIL_INSERT_HOTWORD = 0x3008, DS_ERR_FAIL_CLEAR_HOTWORD = 0x3009, DS_ERR_FAIL_ERASE_HOTWORD = 0x3010,

};
# 106 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
__attribute__ ((visibility("default")))
int DS_CreateModel(const char* aModelPath,
                   ModelState** retval);
# 119 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
__attribute__ ((visibility("default")))
unsigned int DS_GetModelBeamWidth(const ModelState* aCtx);
# 131 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
__attribute__ ((visibility("default")))
int DS_SetModelBeamWidth(ModelState* aCtx,
                         unsigned int aBeamWidth);
# 142 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
__attribute__ ((visibility("default")))
int DS_GetModelSampleRate(const ModelState* aCtx);




__attribute__ ((visibility("default")))
void DS_FreeModel(ModelState* ctx);
# 159 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
__attribute__ ((visibility("default")))
int DS_EnableExternalScorer(ModelState* aCtx,
                            const char* aScorerPath);
# 172 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
__attribute__ ((visibility("default")))
int DS_AddHotWord(ModelState* aCtx,
                  const char* word,
                  float boost);
# 185 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
__attribute__ ((visibility("default")))
int DS_EraseHotWord(ModelState* aCtx,
                    const char* word);
# 196 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
__attribute__ ((visibility("default")))
int DS_ClearHotWords(ModelState* aCtx);
# 206 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
__attribute__ ((visibility("default")))
int DS_DisableExternalScorer(ModelState* aCtx);
# 218 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
__attribute__ ((visibility("default")))
int DS_SetScorerAlphaBeta(ModelState* aCtx,
                          float aAlpha,
                          float aBeta);
# 234 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
__attribute__ ((visibility("default")))
char* DS_SpeechToText(ModelState* aCtx,
                      const short* aBuffer,
                      unsigned int aBufferSize);
# 254 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
__attribute__ ((visibility("default")))
Metadata* DS_SpeechToTextWithMetadata(ModelState* aCtx,
                                      const short* aBuffer,
                                      unsigned int aBufferSize,
                                      unsigned int aNumResults);
# 271 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
__attribute__ ((visibility("default")))
int DS_CreateStream(ModelState* aCtx,
                    StreamingState** retval);
# 283 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
__attribute__ ((visibility("default")))
void DS_FeedAudioContent(StreamingState* aSctx,
                         const short* aBuffer,
                         unsigned int aBufferSize);
# 296 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
__attribute__ ((visibility("default")))
char* DS_IntermediateDecode(const StreamingState* aSctx);
# 311 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
__attribute__ ((visibility("default")))
Metadata* DS_IntermediateDecodeWithMetadata(const StreamingState* aSctx,
                                            unsigned int aNumResults);
# 326 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
__attribute__ ((visibility("default")))
char* DS_FinishStream(StreamingState* aSctx);
# 344 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
__attribute__ ((visibility("default")))
Metadata* DS_FinishStreamWithMetadata(StreamingState* aSctx,
                                      unsigned int aNumResults);
# 357 "/home/matthew/Documents/server/src/main/cpp/deepspeech/deepspeech.h"
__attribute__ ((visibility("default")))
void DS_FreeStream(StreamingState* aSctx);




__attribute__ ((visibility("default")))
void DS_FreeMetadata(Metadata* m);




__attribute__ ((visibility("default")))
void DS_FreeString(char* str);







__attribute__ ((visibility("default")))
char* DS_Version();







__attribute__ ((visibility("default")))
char* DS_ErrorCodeToErrorMessage(int aErrorCode);




}
# 2 "./ds_wrapper.cpp" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 461 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 452 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 453 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 454 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 462 "/usr/include/features.h" 2 3 4
# 485 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 486 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4


# 29 "/usr/include/stdio.h" 3 4
extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 209 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 39 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4





typedef __gnuc_va_list va_list;
# 63 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;






typedef __ssize_t ssize_t;






typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4



extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();
# 164 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) throw ();







extern FILE *tmpfile (void) ;
# 183 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;




extern char *tmpnam_r (char *__s) throw () ;
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 227 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 237 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 246 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 270 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();






extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) throw () __asm__ ("" "__isoc99_sscanf")

                      ;
# 432 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));




extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) throw () __asm__ ("" "__isoc99_vsscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 485 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 510 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 521 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;







extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 858 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 873 "/usr/include/stdio.h" 3 4
}
# 3 "./ds_wrapper.cpp" 2
# 1 "./com_NativeInterface_NativeInterface.h" 1

# 1 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 1
# 40 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h" 1 3 4
# 41 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 2




# 1 "/usr/lib/jvm/java-11-openjdk-amd64//include/linux/jni_md.h" 1
# 47 "/usr/lib/jvm/java-11-openjdk-amd64//include/linux/jni_md.h"

# 47 "/usr/lib/jvm/java-11-openjdk-amd64//include/linux/jni_md.h"
typedef int jint;

typedef long jlong;




typedef signed char jbyte;
# 46 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 2


extern "C" {
# 57 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
typedef unsigned char jboolean;
typedef unsigned short jchar;
typedef short jshort;
typedef float jfloat;
typedef double jdouble;

typedef jint jsize;



class _jobject {};
class _jclass : public _jobject {};
class _jthrowable : public _jobject {};
class _jstring : public _jobject {};
class _jarray : public _jobject {};
class _jbooleanArray : public _jarray {};
class _jbyteArray : public _jarray {};
class _jcharArray : public _jarray {};
class _jshortArray : public _jarray {};
class _jintArray : public _jarray {};
class _jlongArray : public _jarray {};
class _jfloatArray : public _jarray {};
class _jdoubleArray : public _jarray {};
class _jobjectArray : public _jarray {};

typedef _jobject *jobject;
typedef _jclass *jclass;
typedef _jthrowable *jthrowable;
typedef _jstring *jstring;
typedef _jarray *jarray;
typedef _jbooleanArray *jbooleanArray;
typedef _jbyteArray *jbyteArray;
typedef _jcharArray *jcharArray;
typedef _jshortArray *jshortArray;
typedef _jintArray *jintArray;
typedef _jlongArray *jlongArray;
typedef _jfloatArray *jfloatArray;
typedef _jdoubleArray *jdoubleArray;
typedef _jobjectArray *jobjectArray;
# 118 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
typedef jobject jweak;

typedef union jvalue {
    jboolean z;
    jbyte b;
    jchar c;
    jshort s;
    jint i;
    jlong j;
    jfloat f;
    jdouble d;
    jobject l;
} jvalue;

struct _jfieldID;
typedef struct _jfieldID *jfieldID;

struct _jmethodID;
typedef struct _jmethodID *jmethodID;


typedef enum _jobjectType {
     JNIInvalidRefType = 0,
     JNILocalRefType = 1,
     JNIGlobalRefType = 2,
     JNIWeakGlobalRefType = 3
} jobjectRefType;
# 180 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
typedef struct {
    char *name;
    char *signature;
    void *fnPtr;
} JNINativeMethod;





struct JNINativeInterface_;

struct JNIEnv_;


typedef JNIEnv_ JNIEnv;
# 204 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
struct JNIInvokeInterface_;

struct JavaVM_;


typedef JavaVM_ JavaVM;




struct JNINativeInterface_ {
    void *reserved0;
    void *reserved1;
    void *reserved2;

    void *reserved3;
    jint ( *GetVersion)(JNIEnv *env);

    jclass ( *DefineClass)
      (JNIEnv *env, const char *name, jobject loader, const jbyte *buf,
       jsize len);
    jclass ( *FindClass)
      (JNIEnv *env, const char *name);

    jmethodID ( *FromReflectedMethod)
      (JNIEnv *env, jobject method);
    jfieldID ( *FromReflectedField)
      (JNIEnv *env, jobject field);

    jobject ( *ToReflectedMethod)
      (JNIEnv *env, jclass cls, jmethodID methodID, jboolean isStatic);

    jclass ( *GetSuperclass)
      (JNIEnv *env, jclass sub);
    jboolean ( *IsAssignableFrom)
      (JNIEnv *env, jclass sub, jclass sup);

    jobject ( *ToReflectedField)
      (JNIEnv *env, jclass cls, jfieldID fieldID, jboolean isStatic);

    jint ( *Throw)
      (JNIEnv *env, jthrowable obj);
    jint ( *ThrowNew)
      (JNIEnv *env, jclass clazz, const char *msg);
    jthrowable ( *ExceptionOccurred)
      (JNIEnv *env);
    void ( *ExceptionDescribe)
      (JNIEnv *env);
    void ( *ExceptionClear)
      (JNIEnv *env);
    void ( *FatalError)
      (JNIEnv *env, const char *msg);

    jint ( *PushLocalFrame)
      (JNIEnv *env, jint capacity);
    jobject ( *PopLocalFrame)
      (JNIEnv *env, jobject result);

    jobject ( *NewGlobalRef)
      (JNIEnv *env, jobject lobj);
    void ( *DeleteGlobalRef)
      (JNIEnv *env, jobject gref);
    void ( *DeleteLocalRef)
      (JNIEnv *env, jobject obj);
    jboolean ( *IsSameObject)
      (JNIEnv *env, jobject obj1, jobject obj2);
    jobject ( *NewLocalRef)
      (JNIEnv *env, jobject ref);
    jint ( *EnsureLocalCapacity)
      (JNIEnv *env, jint capacity);

    jobject ( *AllocObject)
      (JNIEnv *env, jclass clazz);
    jobject ( *NewObject)
      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
    jobject ( *NewObjectV)
      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
    jobject ( *NewObjectA)
      (JNIEnv *env, jclass clazz, jmethodID methodID, const jvalue *args);

    jclass ( *GetObjectClass)
      (JNIEnv *env, jobject obj);
    jboolean ( *IsInstanceOf)
      (JNIEnv *env, jobject obj, jclass clazz);

    jmethodID ( *GetMethodID)
      (JNIEnv *env, jclass clazz, const char *name, const char *sig);

    jobject ( *CallObjectMethod)
      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
    jobject ( *CallObjectMethodV)
      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
    jobject ( *CallObjectMethodA)
      (JNIEnv *env, jobject obj, jmethodID methodID, const jvalue * args);

    jboolean ( *CallBooleanMethod)
      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
    jboolean ( *CallBooleanMethodV)
      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
    jboolean ( *CallBooleanMethodA)
      (JNIEnv *env, jobject obj, jmethodID methodID, const jvalue * args);

    jbyte ( *CallByteMethod)
      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
    jbyte ( *CallByteMethodV)
      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
    jbyte ( *CallByteMethodA)
      (JNIEnv *env, jobject obj, jmethodID methodID, const jvalue *args);

    jchar ( *CallCharMethod)
      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
    jchar ( *CallCharMethodV)
      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
    jchar ( *CallCharMethodA)
      (JNIEnv *env, jobject obj, jmethodID methodID, const jvalue *args);

    jshort ( *CallShortMethod)
      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
    jshort ( *CallShortMethodV)
      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
    jshort ( *CallShortMethodA)
      (JNIEnv *env, jobject obj, jmethodID methodID, const jvalue *args);

    jint ( *CallIntMethod)
      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
    jint ( *CallIntMethodV)
      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
    jint ( *CallIntMethodA)
      (JNIEnv *env, jobject obj, jmethodID methodID, const jvalue *args);

    jlong ( *CallLongMethod)
      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
    jlong ( *CallLongMethodV)
      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
    jlong ( *CallLongMethodA)
      (JNIEnv *env, jobject obj, jmethodID methodID, const jvalue *args);

    jfloat ( *CallFloatMethod)
      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
    jfloat ( *CallFloatMethodV)
      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
    jfloat ( *CallFloatMethodA)
      (JNIEnv *env, jobject obj, jmethodID methodID, const jvalue *args);

    jdouble ( *CallDoubleMethod)
      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
    jdouble ( *CallDoubleMethodV)
      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
    jdouble ( *CallDoubleMethodA)
      (JNIEnv *env, jobject obj, jmethodID methodID, const jvalue *args);

    void ( *CallVoidMethod)
      (JNIEnv *env, jobject obj, jmethodID methodID, ...);
    void ( *CallVoidMethodV)
      (JNIEnv *env, jobject obj, jmethodID methodID, va_list args);
    void ( *CallVoidMethodA)
      (JNIEnv *env, jobject obj, jmethodID methodID, const jvalue * args);

    jobject ( *CallNonvirtualObjectMethod)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
    jobject ( *CallNonvirtualObjectMethodV)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID,
       va_list args);
    jobject ( *CallNonvirtualObjectMethodA)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID,
       const jvalue * args);

    jboolean ( *CallNonvirtualBooleanMethod)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
    jboolean ( *CallNonvirtualBooleanMethodV)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID,
       va_list args);
    jboolean ( *CallNonvirtualBooleanMethodA)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID,
       const jvalue * args);

    jbyte ( *CallNonvirtualByteMethod)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
    jbyte ( *CallNonvirtualByteMethodV)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID,
       va_list args);
    jbyte ( *CallNonvirtualByteMethodA)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID,
       const jvalue *args);

    jchar ( *CallNonvirtualCharMethod)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
    jchar ( *CallNonvirtualCharMethodV)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID,
       va_list args);
    jchar ( *CallNonvirtualCharMethodA)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID,
       const jvalue *args);

    jshort ( *CallNonvirtualShortMethod)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
    jshort ( *CallNonvirtualShortMethodV)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID,
       va_list args);
    jshort ( *CallNonvirtualShortMethodA)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID,
       const jvalue *args);

    jint ( *CallNonvirtualIntMethod)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
    jint ( *CallNonvirtualIntMethodV)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID,
       va_list args);
    jint ( *CallNonvirtualIntMethodA)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID,
       const jvalue *args);

    jlong ( *CallNonvirtualLongMethod)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
    jlong ( *CallNonvirtualLongMethodV)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID,
       va_list args);
    jlong ( *CallNonvirtualLongMethodA)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID,
       const jvalue *args);

    jfloat ( *CallNonvirtualFloatMethod)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
    jfloat ( *CallNonvirtualFloatMethodV)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID,
       va_list args);
    jfloat ( *CallNonvirtualFloatMethodA)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID,
       const jvalue *args);

    jdouble ( *CallNonvirtualDoubleMethod)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
    jdouble ( *CallNonvirtualDoubleMethodV)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID,
       va_list args);
    jdouble ( *CallNonvirtualDoubleMethodA)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID,
       const jvalue *args);

    void ( *CallNonvirtualVoidMethod)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...);
    void ( *CallNonvirtualVoidMethodV)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID,
       va_list args);
    void ( *CallNonvirtualVoidMethodA)
      (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID,
       const jvalue * args);

    jfieldID ( *GetFieldID)
      (JNIEnv *env, jclass clazz, const char *name, const char *sig);

    jobject ( *GetObjectField)
      (JNIEnv *env, jobject obj, jfieldID fieldID);
    jboolean ( *GetBooleanField)
      (JNIEnv *env, jobject obj, jfieldID fieldID);
    jbyte ( *GetByteField)
      (JNIEnv *env, jobject obj, jfieldID fieldID);
    jchar ( *GetCharField)
      (JNIEnv *env, jobject obj, jfieldID fieldID);
    jshort ( *GetShortField)
      (JNIEnv *env, jobject obj, jfieldID fieldID);
    jint ( *GetIntField)
      (JNIEnv *env, jobject obj, jfieldID fieldID);
    jlong ( *GetLongField)
      (JNIEnv *env, jobject obj, jfieldID fieldID);
    jfloat ( *GetFloatField)
      (JNIEnv *env, jobject obj, jfieldID fieldID);
    jdouble ( *GetDoubleField)
      (JNIEnv *env, jobject obj, jfieldID fieldID);

    void ( *SetObjectField)
      (JNIEnv *env, jobject obj, jfieldID fieldID, jobject val);
    void ( *SetBooleanField)
      (JNIEnv *env, jobject obj, jfieldID fieldID, jboolean val);
    void ( *SetByteField)
      (JNIEnv *env, jobject obj, jfieldID fieldID, jbyte val);
    void ( *SetCharField)
      (JNIEnv *env, jobject obj, jfieldID fieldID, jchar val);
    void ( *SetShortField)
      (JNIEnv *env, jobject obj, jfieldID fieldID, jshort val);
    void ( *SetIntField)
      (JNIEnv *env, jobject obj, jfieldID fieldID, jint val);
    void ( *SetLongField)
      (JNIEnv *env, jobject obj, jfieldID fieldID, jlong val);
    void ( *SetFloatField)
      (JNIEnv *env, jobject obj, jfieldID fieldID, jfloat val);
    void ( *SetDoubleField)
      (JNIEnv *env, jobject obj, jfieldID fieldID, jdouble val);

    jmethodID ( *GetStaticMethodID)
      (JNIEnv *env, jclass clazz, const char *name, const char *sig);

    jobject ( *CallStaticObjectMethod)
      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
    jobject ( *CallStaticObjectMethodV)
      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
    jobject ( *CallStaticObjectMethodA)
      (JNIEnv *env, jclass clazz, jmethodID methodID, const jvalue *args);

    jboolean ( *CallStaticBooleanMethod)
      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
    jboolean ( *CallStaticBooleanMethodV)
      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
    jboolean ( *CallStaticBooleanMethodA)
      (JNIEnv *env, jclass clazz, jmethodID methodID, const jvalue *args);

    jbyte ( *CallStaticByteMethod)
      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
    jbyte ( *CallStaticByteMethodV)
      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
    jbyte ( *CallStaticByteMethodA)
      (JNIEnv *env, jclass clazz, jmethodID methodID, const jvalue *args);

    jchar ( *CallStaticCharMethod)
      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
    jchar ( *CallStaticCharMethodV)
      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
    jchar ( *CallStaticCharMethodA)
      (JNIEnv *env, jclass clazz, jmethodID methodID, const jvalue *args);

    jshort ( *CallStaticShortMethod)
      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
    jshort ( *CallStaticShortMethodV)
      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
    jshort ( *CallStaticShortMethodA)
      (JNIEnv *env, jclass clazz, jmethodID methodID, const jvalue *args);

    jint ( *CallStaticIntMethod)
      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
    jint ( *CallStaticIntMethodV)
      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
    jint ( *CallStaticIntMethodA)
      (JNIEnv *env, jclass clazz, jmethodID methodID, const jvalue *args);

    jlong ( *CallStaticLongMethod)
      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
    jlong ( *CallStaticLongMethodV)
      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
    jlong ( *CallStaticLongMethodA)
      (JNIEnv *env, jclass clazz, jmethodID methodID, const jvalue *args);

    jfloat ( *CallStaticFloatMethod)
      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
    jfloat ( *CallStaticFloatMethodV)
      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
    jfloat ( *CallStaticFloatMethodA)
      (JNIEnv *env, jclass clazz, jmethodID methodID, const jvalue *args);

    jdouble ( *CallStaticDoubleMethod)
      (JNIEnv *env, jclass clazz, jmethodID methodID, ...);
    jdouble ( *CallStaticDoubleMethodV)
      (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args);
    jdouble ( *CallStaticDoubleMethodA)
      (JNIEnv *env, jclass clazz, jmethodID methodID, const jvalue *args);

    void ( *CallStaticVoidMethod)
      (JNIEnv *env, jclass cls, jmethodID methodID, ...);
    void ( *CallStaticVoidMethodV)
      (JNIEnv *env, jclass cls, jmethodID methodID, va_list args);
    void ( *CallStaticVoidMethodA)
      (JNIEnv *env, jclass cls, jmethodID methodID, const jvalue * args);

    jfieldID ( *GetStaticFieldID)
      (JNIEnv *env, jclass clazz, const char *name, const char *sig);
    jobject ( *GetStaticObjectField)
      (JNIEnv *env, jclass clazz, jfieldID fieldID);
    jboolean ( *GetStaticBooleanField)
      (JNIEnv *env, jclass clazz, jfieldID fieldID);
    jbyte ( *GetStaticByteField)
      (JNIEnv *env, jclass clazz, jfieldID fieldID);
    jchar ( *GetStaticCharField)
      (JNIEnv *env, jclass clazz, jfieldID fieldID);
    jshort ( *GetStaticShortField)
      (JNIEnv *env, jclass clazz, jfieldID fieldID);
    jint ( *GetStaticIntField)
      (JNIEnv *env, jclass clazz, jfieldID fieldID);
    jlong ( *GetStaticLongField)
      (JNIEnv *env, jclass clazz, jfieldID fieldID);
    jfloat ( *GetStaticFloatField)
      (JNIEnv *env, jclass clazz, jfieldID fieldID);
    jdouble ( *GetStaticDoubleField)
      (JNIEnv *env, jclass clazz, jfieldID fieldID);

    void ( *SetStaticObjectField)
      (JNIEnv *env, jclass clazz, jfieldID fieldID, jobject value);
    void ( *SetStaticBooleanField)
      (JNIEnv *env, jclass clazz, jfieldID fieldID, jboolean value);
    void ( *SetStaticByteField)
      (JNIEnv *env, jclass clazz, jfieldID fieldID, jbyte value);
    void ( *SetStaticCharField)
      (JNIEnv *env, jclass clazz, jfieldID fieldID, jchar value);
    void ( *SetStaticShortField)
      (JNIEnv *env, jclass clazz, jfieldID fieldID, jshort value);
    void ( *SetStaticIntField)
      (JNIEnv *env, jclass clazz, jfieldID fieldID, jint value);
    void ( *SetStaticLongField)
      (JNIEnv *env, jclass clazz, jfieldID fieldID, jlong value);
    void ( *SetStaticFloatField)
      (JNIEnv *env, jclass clazz, jfieldID fieldID, jfloat value);
    void ( *SetStaticDoubleField)
      (JNIEnv *env, jclass clazz, jfieldID fieldID, jdouble value);

    jstring ( *NewString)
      (JNIEnv *env, const jchar *unicode, jsize len);
    jsize ( *GetStringLength)
      (JNIEnv *env, jstring str);
    const jchar *( *GetStringChars)
      (JNIEnv *env, jstring str, jboolean *isCopy);
    void ( *ReleaseStringChars)
      (JNIEnv *env, jstring str, const jchar *chars);

    jstring ( *NewStringUTF)
      (JNIEnv *env, const char *utf);
    jsize ( *GetStringUTFLength)
      (JNIEnv *env, jstring str);
    const char* ( *GetStringUTFChars)
      (JNIEnv *env, jstring str, jboolean *isCopy);
    void ( *ReleaseStringUTFChars)
      (JNIEnv *env, jstring str, const char* chars);


    jsize ( *GetArrayLength)
      (JNIEnv *env, jarray array);

    jobjectArray ( *NewObjectArray)
      (JNIEnv *env, jsize len, jclass clazz, jobject init);
    jobject ( *GetObjectArrayElement)
      (JNIEnv *env, jobjectArray array, jsize index);
    void ( *SetObjectArrayElement)
      (JNIEnv *env, jobjectArray array, jsize index, jobject val);

    jbooleanArray ( *NewBooleanArray)
      (JNIEnv *env, jsize len);
    jbyteArray ( *NewByteArray)
      (JNIEnv *env, jsize len);
    jcharArray ( *NewCharArray)
      (JNIEnv *env, jsize len);
    jshortArray ( *NewShortArray)
      (JNIEnv *env, jsize len);
    jintArray ( *NewIntArray)
      (JNIEnv *env, jsize len);
    jlongArray ( *NewLongArray)
      (JNIEnv *env, jsize len);
    jfloatArray ( *NewFloatArray)
      (JNIEnv *env, jsize len);
    jdoubleArray ( *NewDoubleArray)
      (JNIEnv *env, jsize len);

    jboolean * ( *GetBooleanArrayElements)
      (JNIEnv *env, jbooleanArray array, jboolean *isCopy);
    jbyte * ( *GetByteArrayElements)
      (JNIEnv *env, jbyteArray array, jboolean *isCopy);
    jchar * ( *GetCharArrayElements)
      (JNIEnv *env, jcharArray array, jboolean *isCopy);
    jshort * ( *GetShortArrayElements)
      (JNIEnv *env, jshortArray array, jboolean *isCopy);
    jint * ( *GetIntArrayElements)
      (JNIEnv *env, jintArray array, jboolean *isCopy);
    jlong * ( *GetLongArrayElements)
      (JNIEnv *env, jlongArray array, jboolean *isCopy);
    jfloat * ( *GetFloatArrayElements)
      (JNIEnv *env, jfloatArray array, jboolean *isCopy);
    jdouble * ( *GetDoubleArrayElements)
      (JNIEnv *env, jdoubleArray array, jboolean *isCopy);

    void ( *ReleaseBooleanArrayElements)
      (JNIEnv *env, jbooleanArray array, jboolean *elems, jint mode);
    void ( *ReleaseByteArrayElements)
      (JNIEnv *env, jbyteArray array, jbyte *elems, jint mode);
    void ( *ReleaseCharArrayElements)
      (JNIEnv *env, jcharArray array, jchar *elems, jint mode);
    void ( *ReleaseShortArrayElements)
      (JNIEnv *env, jshortArray array, jshort *elems, jint mode);
    void ( *ReleaseIntArrayElements)
      (JNIEnv *env, jintArray array, jint *elems, jint mode);
    void ( *ReleaseLongArrayElements)
      (JNIEnv *env, jlongArray array, jlong *elems, jint mode);
    void ( *ReleaseFloatArrayElements)
      (JNIEnv *env, jfloatArray array, jfloat *elems, jint mode);
    void ( *ReleaseDoubleArrayElements)
      (JNIEnv *env, jdoubleArray array, jdouble *elems, jint mode);

    void ( *GetBooleanArrayRegion)
      (JNIEnv *env, jbooleanArray array, jsize start, jsize l, jboolean *buf);
    void ( *GetByteArrayRegion)
      (JNIEnv *env, jbyteArray array, jsize start, jsize len, jbyte *buf);
    void ( *GetCharArrayRegion)
      (JNIEnv *env, jcharArray array, jsize start, jsize len, jchar *buf);
    void ( *GetShortArrayRegion)
      (JNIEnv *env, jshortArray array, jsize start, jsize len, jshort *buf);
    void ( *GetIntArrayRegion)
      (JNIEnv *env, jintArray array, jsize start, jsize len, jint *buf);
    void ( *GetLongArrayRegion)
      (JNIEnv *env, jlongArray array, jsize start, jsize len, jlong *buf);
    void ( *GetFloatArrayRegion)
      (JNIEnv *env, jfloatArray array, jsize start, jsize len, jfloat *buf);
    void ( *GetDoubleArrayRegion)
      (JNIEnv *env, jdoubleArray array, jsize start, jsize len, jdouble *buf);

    void ( *SetBooleanArrayRegion)
      (JNIEnv *env, jbooleanArray array, jsize start, jsize l, const jboolean *buf);
    void ( *SetByteArrayRegion)
      (JNIEnv *env, jbyteArray array, jsize start, jsize len, const jbyte *buf);
    void ( *SetCharArrayRegion)
      (JNIEnv *env, jcharArray array, jsize start, jsize len, const jchar *buf);
    void ( *SetShortArrayRegion)
      (JNIEnv *env, jshortArray array, jsize start, jsize len, const jshort *buf);
    void ( *SetIntArrayRegion)
      (JNIEnv *env, jintArray array, jsize start, jsize len, const jint *buf);
    void ( *SetLongArrayRegion)
      (JNIEnv *env, jlongArray array, jsize start, jsize len, const jlong *buf);
    void ( *SetFloatArrayRegion)
      (JNIEnv *env, jfloatArray array, jsize start, jsize len, const jfloat *buf);
    void ( *SetDoubleArrayRegion)
      (JNIEnv *env, jdoubleArray array, jsize start, jsize len, const jdouble *buf);

    jint ( *RegisterNatives)
      (JNIEnv *env, jclass clazz, const JNINativeMethod *methods,
       jint nMethods);
    jint ( *UnregisterNatives)
      (JNIEnv *env, jclass clazz);

    jint ( *MonitorEnter)
      (JNIEnv *env, jobject obj);
    jint ( *MonitorExit)
      (JNIEnv *env, jobject obj);

    jint ( *GetJavaVM)
      (JNIEnv *env, JavaVM **vm);

    void ( *GetStringRegion)
      (JNIEnv *env, jstring str, jsize start, jsize len, jchar *buf);
    void ( *GetStringUTFRegion)
      (JNIEnv *env, jstring str, jsize start, jsize len, char *buf);

    void * ( *GetPrimitiveArrayCritical)
      (JNIEnv *env, jarray array, jboolean *isCopy);
    void ( *ReleasePrimitiveArrayCritical)
      (JNIEnv *env, jarray array, void *carray, jint mode);

    const jchar * ( *GetStringCritical)
      (JNIEnv *env, jstring string, jboolean *isCopy);
    void ( *ReleaseStringCritical)
      (JNIEnv *env, jstring string, const jchar *cstring);

    jweak ( *NewWeakGlobalRef)
       (JNIEnv *env, jobject obj);
    void ( *DeleteWeakGlobalRef)
       (JNIEnv *env, jweak ref);

    jboolean ( *ExceptionCheck)
       (JNIEnv *env);

    jobject ( *NewDirectByteBuffer)
       (JNIEnv* env, void* address, jlong capacity);
    void* ( *GetDirectBufferAddress)
       (JNIEnv* env, jobject buf);
    jlong ( *GetDirectBufferCapacity)
       (JNIEnv* env, jobject buf);



    jobjectRefType ( *GetObjectRefType)
        (JNIEnv* env, jobject obj);



    jobject ( *GetModule)
       (JNIEnv* env, jclass clazz);
};
# 787 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
struct JNIEnv_ {
    const struct JNINativeInterface_ *functions;


    jint GetVersion() {
        return functions->GetVersion(this);
    }
    jclass DefineClass(const char *name, jobject loader, const jbyte *buf,
                       jsize len) {
        return functions->DefineClass(this, name, loader, buf, len);
    }
    jclass FindClass(const char *name) {
        return functions->FindClass(this, name);
    }
    jmethodID FromReflectedMethod(jobject method) {
        return functions->FromReflectedMethod(this,method);
    }
    jfieldID FromReflectedField(jobject field) {
        return functions->FromReflectedField(this,field);
    }

    jobject ToReflectedMethod(jclass cls, jmethodID methodID, jboolean isStatic) {
        return functions->ToReflectedMethod(this, cls, methodID, isStatic);
    }

    jclass GetSuperclass(jclass sub) {
        return functions->GetSuperclass(this, sub);
    }
    jboolean IsAssignableFrom(jclass sub, jclass sup) {
        return functions->IsAssignableFrom(this, sub, sup);
    }

    jobject ToReflectedField(jclass cls, jfieldID fieldID, jboolean isStatic) {
        return functions->ToReflectedField(this,cls,fieldID,isStatic);
    }

    jint Throw(jthrowable obj) {
        return functions->Throw(this, obj);
    }
    jint ThrowNew(jclass clazz, const char *msg) {
        return functions->ThrowNew(this, clazz, msg);
    }
    jthrowable ExceptionOccurred() {
        return functions->ExceptionOccurred(this);
    }
    void ExceptionDescribe() {
        functions->ExceptionDescribe(this);
    }
    void ExceptionClear() {
        functions->ExceptionClear(this);
    }
    void FatalError(const char *msg) {
        functions->FatalError(this, msg);
    }

    jint PushLocalFrame(jint capacity) {
        return functions->PushLocalFrame(this,capacity);
    }
    jobject PopLocalFrame(jobject result) {
        return functions->PopLocalFrame(this,result);
    }

    jobject NewGlobalRef(jobject lobj) {
        return functions->NewGlobalRef(this,lobj);
    }
    void DeleteGlobalRef(jobject gref) {
        functions->DeleteGlobalRef(this,gref);
    }
    void DeleteLocalRef(jobject obj) {
        functions->DeleteLocalRef(this, obj);
    }

    jboolean IsSameObject(jobject obj1, jobject obj2) {
        return functions->IsSameObject(this,obj1,obj2);
    }

    jobject NewLocalRef(jobject ref) {
        return functions->NewLocalRef(this,ref);
    }
    jint EnsureLocalCapacity(jint capacity) {
        return functions->EnsureLocalCapacity(this,capacity);
    }

    jobject AllocObject(jclass clazz) {
        return functions->AllocObject(this,clazz);
    }
    jobject NewObject(jclass clazz, jmethodID methodID, ...) {
        va_list args;
        jobject result;
        
# 876 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 876 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 876 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 876 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 876 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 876 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                               ;
        result = functions->NewObjectV(this,clazz,methodID,args);
        
# 878 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 878 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 878 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 878 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jobject NewObjectV(jclass clazz, jmethodID methodID,
                       va_list args) {
        return functions->NewObjectV(this,clazz,methodID,args);
    }
    jobject NewObjectA(jclass clazz, jmethodID methodID,
                       const jvalue *args) {
        return functions->NewObjectA(this,clazz,methodID,args);
    }

    jclass GetObjectClass(jobject obj) {
        return functions->GetObjectClass(this,obj);
    }
    jboolean IsInstanceOf(jobject obj, jclass clazz) {
        return functions->IsInstanceOf(this,obj,clazz);
    }

    jmethodID GetMethodID(jclass clazz, const char *name,
                          const char *sig) {
        return functions->GetMethodID(this,clazz,name,sig);
    }

    jobject CallObjectMethod(jobject obj, jmethodID methodID, ...) {
        va_list args;
        jobject result;
        
# 905 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 905 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 905 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 905 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 905 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 905 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallObjectMethodV(this,obj,methodID,args);
        
# 907 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 907 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 907 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 907 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jobject CallObjectMethodV(jobject obj, jmethodID methodID,
                        va_list args) {
        return functions->CallObjectMethodV(this,obj,methodID,args);
    }
    jobject CallObjectMethodA(jobject obj, jmethodID methodID,
                        const jvalue * args) {
        return functions->CallObjectMethodA(this,obj,methodID,args);
    }

    jboolean CallBooleanMethod(jobject obj,
                               jmethodID methodID, ...) {
        va_list args;
        jboolean result;
        
# 923 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 923 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 923 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 923 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 923 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 923 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallBooleanMethodV(this,obj,methodID,args);
        
# 925 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 925 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 925 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 925 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jboolean CallBooleanMethodV(jobject obj, jmethodID methodID,
                                va_list args) {
        return functions->CallBooleanMethodV(this,obj,methodID,args);
    }
    jboolean CallBooleanMethodA(jobject obj, jmethodID methodID,
                                const jvalue * args) {
        return functions->CallBooleanMethodA(this,obj,methodID, args);
    }

    jbyte CallByteMethod(jobject obj, jmethodID methodID, ...) {
        va_list args;
        jbyte result;
        
# 940 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 940 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 940 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 940 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 940 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 940 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallByteMethodV(this,obj,methodID,args);
        
# 942 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 942 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 942 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 942 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jbyte CallByteMethodV(jobject obj, jmethodID methodID,
                          va_list args) {
        return functions->CallByteMethodV(this,obj,methodID,args);
    }
    jbyte CallByteMethodA(jobject obj, jmethodID methodID,
                          const jvalue * args) {
        return functions->CallByteMethodA(this,obj,methodID,args);
    }

    jchar CallCharMethod(jobject obj, jmethodID methodID, ...) {
        va_list args;
        jchar result;
        
# 957 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 957 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 957 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 957 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 957 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 957 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallCharMethodV(this,obj,methodID,args);
        
# 959 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 959 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 959 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 959 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jchar CallCharMethodV(jobject obj, jmethodID methodID,
                          va_list args) {
        return functions->CallCharMethodV(this,obj,methodID,args);
    }
    jchar CallCharMethodA(jobject obj, jmethodID methodID,
                          const jvalue * args) {
        return functions->CallCharMethodA(this,obj,methodID,args);
    }

    jshort CallShortMethod(jobject obj, jmethodID methodID, ...) {
        va_list args;
        jshort result;
        
# 974 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 974 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 974 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 974 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 974 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 974 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallShortMethodV(this,obj,methodID,args);
        
# 976 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 976 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 976 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 976 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jshort CallShortMethodV(jobject obj, jmethodID methodID,
                            va_list args) {
        return functions->CallShortMethodV(this,obj,methodID,args);
    }
    jshort CallShortMethodA(jobject obj, jmethodID methodID,
                            const jvalue * args) {
        return functions->CallShortMethodA(this,obj,methodID,args);
    }

    jint CallIntMethod(jobject obj, jmethodID methodID, ...) {
        va_list args;
        jint result;
        
# 991 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 991 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 991 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 991 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 991 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 991 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallIntMethodV(this,obj,methodID,args);
        
# 993 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 993 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 993 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 993 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jint CallIntMethodV(jobject obj, jmethodID methodID,
                        va_list args) {
        return functions->CallIntMethodV(this,obj,methodID,args);
    }
    jint CallIntMethodA(jobject obj, jmethodID methodID,
                        const jvalue * args) {
        return functions->CallIntMethodA(this,obj,methodID,args);
    }

    jlong CallLongMethod(jobject obj, jmethodID methodID, ...) {
        va_list args;
        jlong result;
        
# 1008 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1008 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1008 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1008 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1008 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1008 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallLongMethodV(this,obj,methodID,args);
        
# 1010 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1010 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1010 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1010 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jlong CallLongMethodV(jobject obj, jmethodID methodID,
                          va_list args) {
        return functions->CallLongMethodV(this,obj,methodID,args);
    }
    jlong CallLongMethodA(jobject obj, jmethodID methodID,
                          const jvalue * args) {
        return functions->CallLongMethodA(this,obj,methodID,args);
    }

    jfloat CallFloatMethod(jobject obj, jmethodID methodID, ...) {
        va_list args;
        jfloat result;
        
# 1025 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1025 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1025 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1025 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1025 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1025 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallFloatMethodV(this,obj,methodID,args);
        
# 1027 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1027 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1027 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1027 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jfloat CallFloatMethodV(jobject obj, jmethodID methodID,
                            va_list args) {
        return functions->CallFloatMethodV(this,obj,methodID,args);
    }
    jfloat CallFloatMethodA(jobject obj, jmethodID methodID,
                            const jvalue * args) {
        return functions->CallFloatMethodA(this,obj,methodID,args);
    }

    jdouble CallDoubleMethod(jobject obj, jmethodID methodID, ...) {
        va_list args;
        jdouble result;
        
# 1042 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1042 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1042 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1042 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1042 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1042 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallDoubleMethodV(this,obj,methodID,args);
        
# 1044 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1044 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1044 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1044 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jdouble CallDoubleMethodV(jobject obj, jmethodID methodID,
                        va_list args) {
        return functions->CallDoubleMethodV(this,obj,methodID,args);
    }
    jdouble CallDoubleMethodA(jobject obj, jmethodID methodID,
                        const jvalue * args) {
        return functions->CallDoubleMethodA(this,obj,methodID,args);
    }

    void CallVoidMethod(jobject obj, jmethodID methodID, ...) {
        va_list args;
        
# 1058 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1058 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1058 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1058 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1058 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1058 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        functions->CallVoidMethodV(this,obj,methodID,args);
        
# 1060 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1060 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1060 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1060 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
    }
    void CallVoidMethodV(jobject obj, jmethodID methodID,
                         va_list args) {
        functions->CallVoidMethodV(this,obj,methodID,args);
    }
    void CallVoidMethodA(jobject obj, jmethodID methodID,
                         const jvalue * args) {
        functions->CallVoidMethodA(this,obj,methodID,args);
    }

    jobject CallNonvirtualObjectMethod(jobject obj, jclass clazz,
                                       jmethodID methodID, ...) {
        va_list args;
        jobject result;
        
# 1075 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1075 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1075 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1075 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1075 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1075 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallNonvirtualObjectMethodV(this,obj,clazz,
                                                        methodID,args);
        
# 1078 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1078 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1078 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1078 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jobject CallNonvirtualObjectMethodV(jobject obj, jclass clazz,
                                        jmethodID methodID, va_list args) {
        return functions->CallNonvirtualObjectMethodV(this,obj,clazz,
                                                      methodID,args);
    }
    jobject CallNonvirtualObjectMethodA(jobject obj, jclass clazz,
                                        jmethodID methodID, const jvalue * args) {
        return functions->CallNonvirtualObjectMethodA(this,obj,clazz,
                                                      methodID,args);
    }

    jboolean CallNonvirtualBooleanMethod(jobject obj, jclass clazz,
                                         jmethodID methodID, ...) {
        va_list args;
        jboolean result;
        
# 1096 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1096 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1096 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1096 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1096 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1096 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallNonvirtualBooleanMethodV(this,obj,clazz,
                                                         methodID,args);
        
# 1099 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1099 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1099 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1099 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jboolean CallNonvirtualBooleanMethodV(jobject obj, jclass clazz,
                                          jmethodID methodID, va_list args) {
        return functions->CallNonvirtualBooleanMethodV(this,obj,clazz,
                                                       methodID,args);
    }
    jboolean CallNonvirtualBooleanMethodA(jobject obj, jclass clazz,
                                          jmethodID methodID, const jvalue * args) {
        return functions->CallNonvirtualBooleanMethodA(this,obj,clazz,
                                                       methodID, args);
    }

    jbyte CallNonvirtualByteMethod(jobject obj, jclass clazz,
                                   jmethodID methodID, ...) {
        va_list args;
        jbyte result;
        
# 1117 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1117 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1117 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1117 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1117 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1117 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallNonvirtualByteMethodV(this,obj,clazz,
                                                      methodID,args);
        
# 1120 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1120 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1120 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1120 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jbyte CallNonvirtualByteMethodV(jobject obj, jclass clazz,
                                    jmethodID methodID, va_list args) {
        return functions->CallNonvirtualByteMethodV(this,obj,clazz,
                                                    methodID,args);
    }
    jbyte CallNonvirtualByteMethodA(jobject obj, jclass clazz,
                                    jmethodID methodID, const jvalue * args) {
        return functions->CallNonvirtualByteMethodA(this,obj,clazz,
                                                    methodID,args);
    }

    jchar CallNonvirtualCharMethod(jobject obj, jclass clazz,
                                   jmethodID methodID, ...) {
        va_list args;
        jchar result;
        
# 1138 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1138 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1138 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1138 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1138 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1138 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallNonvirtualCharMethodV(this,obj,clazz,
                                                      methodID,args);
        
# 1141 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1141 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1141 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1141 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jchar CallNonvirtualCharMethodV(jobject obj, jclass clazz,
                                    jmethodID methodID, va_list args) {
        return functions->CallNonvirtualCharMethodV(this,obj,clazz,
                                                    methodID,args);
    }
    jchar CallNonvirtualCharMethodA(jobject obj, jclass clazz,
                                    jmethodID methodID, const jvalue * args) {
        return functions->CallNonvirtualCharMethodA(this,obj,clazz,
                                                    methodID,args);
    }

    jshort CallNonvirtualShortMethod(jobject obj, jclass clazz,
                                     jmethodID methodID, ...) {
        va_list args;
        jshort result;
        
# 1159 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1159 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1159 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1159 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1159 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1159 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallNonvirtualShortMethodV(this,obj,clazz,
                                                       methodID,args);
        
# 1162 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1162 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1162 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1162 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jshort CallNonvirtualShortMethodV(jobject obj, jclass clazz,
                                      jmethodID methodID, va_list args) {
        return functions->CallNonvirtualShortMethodV(this,obj,clazz,
                                                     methodID,args);
    }
    jshort CallNonvirtualShortMethodA(jobject obj, jclass clazz,
                                      jmethodID methodID, const jvalue * args) {
        return functions->CallNonvirtualShortMethodA(this,obj,clazz,
                                                     methodID,args);
    }

    jint CallNonvirtualIntMethod(jobject obj, jclass clazz,
                                 jmethodID methodID, ...) {
        va_list args;
        jint result;
        
# 1180 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1180 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1180 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1180 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1180 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1180 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallNonvirtualIntMethodV(this,obj,clazz,
                                                     methodID,args);
        
# 1183 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1183 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1183 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1183 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jint CallNonvirtualIntMethodV(jobject obj, jclass clazz,
                                  jmethodID methodID, va_list args) {
        return functions->CallNonvirtualIntMethodV(this,obj,clazz,
                                                   methodID,args);
    }
    jint CallNonvirtualIntMethodA(jobject obj, jclass clazz,
                                  jmethodID methodID, const jvalue * args) {
        return functions->CallNonvirtualIntMethodA(this,obj,clazz,
                                                   methodID,args);
    }

    jlong CallNonvirtualLongMethod(jobject obj, jclass clazz,
                                   jmethodID methodID, ...) {
        va_list args;
        jlong result;
        
# 1201 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1201 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1201 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1201 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1201 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1201 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallNonvirtualLongMethodV(this,obj,clazz,
                                                      methodID,args);
        
# 1204 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1204 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1204 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1204 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jlong CallNonvirtualLongMethodV(jobject obj, jclass clazz,
                                    jmethodID methodID, va_list args) {
        return functions->CallNonvirtualLongMethodV(this,obj,clazz,
                                                    methodID,args);
    }
    jlong CallNonvirtualLongMethodA(jobject obj, jclass clazz,
                                    jmethodID methodID, const jvalue * args) {
        return functions->CallNonvirtualLongMethodA(this,obj,clazz,
                                                    methodID,args);
    }

    jfloat CallNonvirtualFloatMethod(jobject obj, jclass clazz,
                                     jmethodID methodID, ...) {
        va_list args;
        jfloat result;
        
# 1222 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1222 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1222 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1222 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1222 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1222 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallNonvirtualFloatMethodV(this,obj,clazz,
                                                       methodID,args);
        
# 1225 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1225 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1225 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1225 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jfloat CallNonvirtualFloatMethodV(jobject obj, jclass clazz,
                                      jmethodID methodID,
                                      va_list args) {
        return functions->CallNonvirtualFloatMethodV(this,obj,clazz,
                                                     methodID,args);
    }
    jfloat CallNonvirtualFloatMethodA(jobject obj, jclass clazz,
                                      jmethodID methodID,
                                      const jvalue * args) {
        return functions->CallNonvirtualFloatMethodA(this,obj,clazz,
                                                     methodID,args);
    }

    jdouble CallNonvirtualDoubleMethod(jobject obj, jclass clazz,
                                       jmethodID methodID, ...) {
        va_list args;
        jdouble result;
        
# 1245 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1245 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1245 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1245 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1245 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1245 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallNonvirtualDoubleMethodV(this,obj,clazz,
                                                        methodID,args);
        
# 1248 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1248 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1248 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1248 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jdouble CallNonvirtualDoubleMethodV(jobject obj, jclass clazz,
                                        jmethodID methodID,
                                        va_list args) {
        return functions->CallNonvirtualDoubleMethodV(this,obj,clazz,
                                                      methodID,args);
    }
    jdouble CallNonvirtualDoubleMethodA(jobject obj, jclass clazz,
                                        jmethodID methodID,
                                        const jvalue * args) {
        return functions->CallNonvirtualDoubleMethodA(this,obj,clazz,
                                                      methodID,args);
    }

    void CallNonvirtualVoidMethod(jobject obj, jclass clazz,
                                  jmethodID methodID, ...) {
        va_list args;
        
# 1267 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1267 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1267 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1267 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1267 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1267 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        functions->CallNonvirtualVoidMethodV(this,obj,clazz,methodID,args);
        
# 1269 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1269 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1269 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1269 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
    }
    void CallNonvirtualVoidMethodV(jobject obj, jclass clazz,
                                   jmethodID methodID,
                                   va_list args) {
        functions->CallNonvirtualVoidMethodV(this,obj,clazz,methodID,args);
    }
    void CallNonvirtualVoidMethodA(jobject obj, jclass clazz,
                                   jmethodID methodID,
                                   const jvalue * args) {
        functions->CallNonvirtualVoidMethodA(this,obj,clazz,methodID,args);
    }

    jfieldID GetFieldID(jclass clazz, const char *name,
                        const char *sig) {
        return functions->GetFieldID(this,clazz,name,sig);
    }

    jobject GetObjectField(jobject obj, jfieldID fieldID) {
        return functions->GetObjectField(this,obj,fieldID);
    }
    jboolean GetBooleanField(jobject obj, jfieldID fieldID) {
        return functions->GetBooleanField(this,obj,fieldID);
    }
    jbyte GetByteField(jobject obj, jfieldID fieldID) {
        return functions->GetByteField(this,obj,fieldID);
    }
    jchar GetCharField(jobject obj, jfieldID fieldID) {
        return functions->GetCharField(this,obj,fieldID);
    }
    jshort GetShortField(jobject obj, jfieldID fieldID) {
        return functions->GetShortField(this,obj,fieldID);
    }
    jint GetIntField(jobject obj, jfieldID fieldID) {
        return functions->GetIntField(this,obj,fieldID);
    }
    jlong GetLongField(jobject obj, jfieldID fieldID) {
        return functions->GetLongField(this,obj,fieldID);
    }
    jfloat GetFloatField(jobject obj, jfieldID fieldID) {
        return functions->GetFloatField(this,obj,fieldID);
    }
    jdouble GetDoubleField(jobject obj, jfieldID fieldID) {
        return functions->GetDoubleField(this,obj,fieldID);
    }

    void SetObjectField(jobject obj, jfieldID fieldID, jobject val) {
        functions->SetObjectField(this,obj,fieldID,val);
    }
    void SetBooleanField(jobject obj, jfieldID fieldID,
                         jboolean val) {
        functions->SetBooleanField(this,obj,fieldID,val);
    }
    void SetByteField(jobject obj, jfieldID fieldID,
                      jbyte val) {
        functions->SetByteField(this,obj,fieldID,val);
    }
    void SetCharField(jobject obj, jfieldID fieldID,
                      jchar val) {
        functions->SetCharField(this,obj,fieldID,val);
    }
    void SetShortField(jobject obj, jfieldID fieldID,
                       jshort val) {
        functions->SetShortField(this,obj,fieldID,val);
    }
    void SetIntField(jobject obj, jfieldID fieldID,
                     jint val) {
        functions->SetIntField(this,obj,fieldID,val);
    }
    void SetLongField(jobject obj, jfieldID fieldID,
                      jlong val) {
        functions->SetLongField(this,obj,fieldID,val);
    }
    void SetFloatField(jobject obj, jfieldID fieldID,
                       jfloat val) {
        functions->SetFloatField(this,obj,fieldID,val);
    }
    void SetDoubleField(jobject obj, jfieldID fieldID,
                        jdouble val) {
        functions->SetDoubleField(this,obj,fieldID,val);
    }

    jmethodID GetStaticMethodID(jclass clazz, const char *name,
                                const char *sig) {
        return functions->GetStaticMethodID(this,clazz,name,sig);
    }

    jobject CallStaticObjectMethod(jclass clazz, jmethodID methodID,
                             ...) {
        va_list args;
        jobject result;
        
# 1360 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1360 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1360 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1360 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1360 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1360 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallStaticObjectMethodV(this,clazz,methodID,args);
        
# 1362 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1362 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1362 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1362 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jobject CallStaticObjectMethodV(jclass clazz, jmethodID methodID,
                              va_list args) {
        return functions->CallStaticObjectMethodV(this,clazz,methodID,args);
    }
    jobject CallStaticObjectMethodA(jclass clazz, jmethodID methodID,
                              const jvalue *args) {
        return functions->CallStaticObjectMethodA(this,clazz,methodID,args);
    }

    jboolean CallStaticBooleanMethod(jclass clazz,
                                     jmethodID methodID, ...) {
        va_list args;
        jboolean result;
        
# 1378 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1378 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1378 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1378 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1378 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1378 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallStaticBooleanMethodV(this,clazz,methodID,args);
        
# 1380 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1380 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1380 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1380 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jboolean CallStaticBooleanMethodV(jclass clazz,
                                      jmethodID methodID, va_list args) {
        return functions->CallStaticBooleanMethodV(this,clazz,methodID,args);
    }
    jboolean CallStaticBooleanMethodA(jclass clazz,
                                      jmethodID methodID, const jvalue *args) {
        return functions->CallStaticBooleanMethodA(this,clazz,methodID,args);
    }

    jbyte CallStaticByteMethod(jclass clazz,
                               jmethodID methodID, ...) {
        va_list args;
        jbyte result;
        
# 1396 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1396 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1396 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1396 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1396 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1396 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallStaticByteMethodV(this,clazz,methodID,args);
        
# 1398 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1398 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1398 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1398 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jbyte CallStaticByteMethodV(jclass clazz,
                                jmethodID methodID, va_list args) {
        return functions->CallStaticByteMethodV(this,clazz,methodID,args);
    }
    jbyte CallStaticByteMethodA(jclass clazz,
                                jmethodID methodID, const jvalue *args) {
        return functions->CallStaticByteMethodA(this,clazz,methodID,args);
    }

    jchar CallStaticCharMethod(jclass clazz,
                               jmethodID methodID, ...) {
        va_list args;
        jchar result;
        
# 1414 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1414 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1414 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1414 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1414 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1414 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallStaticCharMethodV(this,clazz,methodID,args);
        
# 1416 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1416 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1416 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1416 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jchar CallStaticCharMethodV(jclass clazz,
                                jmethodID methodID, va_list args) {
        return functions->CallStaticCharMethodV(this,clazz,methodID,args);
    }
    jchar CallStaticCharMethodA(jclass clazz,
                                jmethodID methodID, const jvalue *args) {
        return functions->CallStaticCharMethodA(this,clazz,methodID,args);
    }

    jshort CallStaticShortMethod(jclass clazz,
                                 jmethodID methodID, ...) {
        va_list args;
        jshort result;
        
# 1432 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1432 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1432 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1432 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1432 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1432 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallStaticShortMethodV(this,clazz,methodID,args);
        
# 1434 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1434 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1434 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1434 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jshort CallStaticShortMethodV(jclass clazz,
                                  jmethodID methodID, va_list args) {
        return functions->CallStaticShortMethodV(this,clazz,methodID,args);
    }
    jshort CallStaticShortMethodA(jclass clazz,
                                  jmethodID methodID, const jvalue *args) {
        return functions->CallStaticShortMethodA(this,clazz,methodID,args);
    }

    jint CallStaticIntMethod(jclass clazz,
                             jmethodID methodID, ...) {
        va_list args;
        jint result;
        
# 1450 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1450 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1450 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1450 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1450 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1450 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallStaticIntMethodV(this,clazz,methodID,args);
        
# 1452 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1452 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1452 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1452 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jint CallStaticIntMethodV(jclass clazz,
                              jmethodID methodID, va_list args) {
        return functions->CallStaticIntMethodV(this,clazz,methodID,args);
    }
    jint CallStaticIntMethodA(jclass clazz,
                              jmethodID methodID, const jvalue *args) {
        return functions->CallStaticIntMethodA(this,clazz,methodID,args);
    }

    jlong CallStaticLongMethod(jclass clazz,
                               jmethodID methodID, ...) {
        va_list args;
        jlong result;
        
# 1468 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1468 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1468 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1468 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1468 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1468 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallStaticLongMethodV(this,clazz,methodID,args);
        
# 1470 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1470 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1470 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1470 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jlong CallStaticLongMethodV(jclass clazz,
                                jmethodID methodID, va_list args) {
        return functions->CallStaticLongMethodV(this,clazz,methodID,args);
    }
    jlong CallStaticLongMethodA(jclass clazz,
                                jmethodID methodID, const jvalue *args) {
        return functions->CallStaticLongMethodA(this,clazz,methodID,args);
    }

    jfloat CallStaticFloatMethod(jclass clazz,
                                 jmethodID methodID, ...) {
        va_list args;
        jfloat result;
        
# 1486 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1486 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1486 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1486 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1486 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1486 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallStaticFloatMethodV(this,clazz,methodID,args);
        
# 1488 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1488 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1488 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1488 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jfloat CallStaticFloatMethodV(jclass clazz,
                                  jmethodID methodID, va_list args) {
        return functions->CallStaticFloatMethodV(this,clazz,methodID,args);
    }
    jfloat CallStaticFloatMethodA(jclass clazz,
                                  jmethodID methodID, const jvalue *args) {
        return functions->CallStaticFloatMethodA(this,clazz,methodID,args);
    }

    jdouble CallStaticDoubleMethod(jclass clazz,
                                   jmethodID methodID, ...) {
        va_list args;
        jdouble result;
        
# 1504 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1504 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1504 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1504 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1504 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1504 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        result = functions->CallStaticDoubleMethodV(this,clazz,methodID,args);
        
# 1506 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1506 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1506 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1506 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
        return result;
    }
    jdouble CallStaticDoubleMethodV(jclass clazz,
                                    jmethodID methodID, va_list args) {
        return functions->CallStaticDoubleMethodV(this,clazz,methodID,args);
    }
    jdouble CallStaticDoubleMethodA(jclass clazz,
                                    jmethodID methodID, const jvalue *args) {
        return functions->CallStaticDoubleMethodA(this,clazz,methodID,args);
    }

    void CallStaticVoidMethod(jclass cls, jmethodID methodID, ...) {
        va_list args;
        
# 1520 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_start(
# 1520 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1520 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       ,
# 1520 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       methodID
# 1520 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1520 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                              ;
        functions->CallStaticVoidMethodV(this,cls,methodID,args);
        
# 1522 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       __builtin_va_end(
# 1522 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
       args
# 1522 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h" 3 4
       )
# 1522 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
                   ;
    }
    void CallStaticVoidMethodV(jclass cls, jmethodID methodID,
                               va_list args) {
        functions->CallStaticVoidMethodV(this,cls,methodID,args);
    }
    void CallStaticVoidMethodA(jclass cls, jmethodID methodID,
                               const jvalue * args) {
        functions->CallStaticVoidMethodA(this,cls,methodID,args);
    }

    jfieldID GetStaticFieldID(jclass clazz, const char *name,
                              const char *sig) {
        return functions->GetStaticFieldID(this,clazz,name,sig);
    }
    jobject GetStaticObjectField(jclass clazz, jfieldID fieldID) {
        return functions->GetStaticObjectField(this,clazz,fieldID);
    }
    jboolean GetStaticBooleanField(jclass clazz, jfieldID fieldID) {
        return functions->GetStaticBooleanField(this,clazz,fieldID);
    }
    jbyte GetStaticByteField(jclass clazz, jfieldID fieldID) {
        return functions->GetStaticByteField(this,clazz,fieldID);
    }
    jchar GetStaticCharField(jclass clazz, jfieldID fieldID) {
        return functions->GetStaticCharField(this,clazz,fieldID);
    }
    jshort GetStaticShortField(jclass clazz, jfieldID fieldID) {
        return functions->GetStaticShortField(this,clazz,fieldID);
    }
    jint GetStaticIntField(jclass clazz, jfieldID fieldID) {
        return functions->GetStaticIntField(this,clazz,fieldID);
    }
    jlong GetStaticLongField(jclass clazz, jfieldID fieldID) {
        return functions->GetStaticLongField(this,clazz,fieldID);
    }
    jfloat GetStaticFloatField(jclass clazz, jfieldID fieldID) {
        return functions->GetStaticFloatField(this,clazz,fieldID);
    }
    jdouble GetStaticDoubleField(jclass clazz, jfieldID fieldID) {
        return functions->GetStaticDoubleField(this,clazz,fieldID);
    }

    void SetStaticObjectField(jclass clazz, jfieldID fieldID,
                        jobject value) {
      functions->SetStaticObjectField(this,clazz,fieldID,value);
    }
    void SetStaticBooleanField(jclass clazz, jfieldID fieldID,
                        jboolean value) {
      functions->SetStaticBooleanField(this,clazz,fieldID,value);
    }
    void SetStaticByteField(jclass clazz, jfieldID fieldID,
                        jbyte value) {
      functions->SetStaticByteField(this,clazz,fieldID,value);
    }
    void SetStaticCharField(jclass clazz, jfieldID fieldID,
                        jchar value) {
      functions->SetStaticCharField(this,clazz,fieldID,value);
    }
    void SetStaticShortField(jclass clazz, jfieldID fieldID,
                        jshort value) {
      functions->SetStaticShortField(this,clazz,fieldID,value);
    }
    void SetStaticIntField(jclass clazz, jfieldID fieldID,
                        jint value) {
      functions->SetStaticIntField(this,clazz,fieldID,value);
    }
    void SetStaticLongField(jclass clazz, jfieldID fieldID,
                        jlong value) {
      functions->SetStaticLongField(this,clazz,fieldID,value);
    }
    void SetStaticFloatField(jclass clazz, jfieldID fieldID,
                        jfloat value) {
      functions->SetStaticFloatField(this,clazz,fieldID,value);
    }
    void SetStaticDoubleField(jclass clazz, jfieldID fieldID,
                        jdouble value) {
      functions->SetStaticDoubleField(this,clazz,fieldID,value);
    }

    jstring NewString(const jchar *unicode, jsize len) {
        return functions->NewString(this,unicode,len);
    }
    jsize GetStringLength(jstring str) {
        return functions->GetStringLength(this,str);
    }
    const jchar *GetStringChars(jstring str, jboolean *isCopy) {
        return functions->GetStringChars(this,str,isCopy);
    }
    void ReleaseStringChars(jstring str, const jchar *chars) {
        functions->ReleaseStringChars(this,str,chars);
    }

    jstring NewStringUTF(const char *utf) {
        return functions->NewStringUTF(this,utf);
    }
    jsize GetStringUTFLength(jstring str) {
        return functions->GetStringUTFLength(this,str);
    }
    const char* GetStringUTFChars(jstring str, jboolean *isCopy) {
        return functions->GetStringUTFChars(this,str,isCopy);
    }
    void ReleaseStringUTFChars(jstring str, const char* chars) {
        functions->ReleaseStringUTFChars(this,str,chars);
    }

    jsize GetArrayLength(jarray array) {
        return functions->GetArrayLength(this,array);
    }

    jobjectArray NewObjectArray(jsize len, jclass clazz,
                                jobject init) {
        return functions->NewObjectArray(this,len,clazz,init);
    }
    jobject GetObjectArrayElement(jobjectArray array, jsize index) {
        return functions->GetObjectArrayElement(this,array,index);
    }
    void SetObjectArrayElement(jobjectArray array, jsize index,
                               jobject val) {
        functions->SetObjectArrayElement(this,array,index,val);
    }

    jbooleanArray NewBooleanArray(jsize len) {
        return functions->NewBooleanArray(this,len);
    }
    jbyteArray NewByteArray(jsize len) {
        return functions->NewByteArray(this,len);
    }
    jcharArray NewCharArray(jsize len) {
        return functions->NewCharArray(this,len);
    }
    jshortArray NewShortArray(jsize len) {
        return functions->NewShortArray(this,len);
    }
    jintArray NewIntArray(jsize len) {
        return functions->NewIntArray(this,len);
    }
    jlongArray NewLongArray(jsize len) {
        return functions->NewLongArray(this,len);
    }
    jfloatArray NewFloatArray(jsize len) {
        return functions->NewFloatArray(this,len);
    }
    jdoubleArray NewDoubleArray(jsize len) {
        return functions->NewDoubleArray(this,len);
    }

    jboolean * GetBooleanArrayElements(jbooleanArray array, jboolean *isCopy) {
        return functions->GetBooleanArrayElements(this,array,isCopy);
    }
    jbyte * GetByteArrayElements(jbyteArray array, jboolean *isCopy) {
        return functions->GetByteArrayElements(this,array,isCopy);
    }
    jchar * GetCharArrayElements(jcharArray array, jboolean *isCopy) {
        return functions->GetCharArrayElements(this,array,isCopy);
    }
    jshort * GetShortArrayElements(jshortArray array, jboolean *isCopy) {
        return functions->GetShortArrayElements(this,array,isCopy);
    }
    jint * GetIntArrayElements(jintArray array, jboolean *isCopy) {
        return functions->GetIntArrayElements(this,array,isCopy);
    }
    jlong * GetLongArrayElements(jlongArray array, jboolean *isCopy) {
        return functions->GetLongArrayElements(this,array,isCopy);
    }
    jfloat * GetFloatArrayElements(jfloatArray array, jboolean *isCopy) {
        return functions->GetFloatArrayElements(this,array,isCopy);
    }
    jdouble * GetDoubleArrayElements(jdoubleArray array, jboolean *isCopy) {
        return functions->GetDoubleArrayElements(this,array,isCopy);
    }

    void ReleaseBooleanArrayElements(jbooleanArray array,
                                     jboolean *elems,
                                     jint mode) {
        functions->ReleaseBooleanArrayElements(this,array,elems,mode);
    }
    void ReleaseByteArrayElements(jbyteArray array,
                                  jbyte *elems,
                                  jint mode) {
        functions->ReleaseByteArrayElements(this,array,elems,mode);
    }
    void ReleaseCharArrayElements(jcharArray array,
                                  jchar *elems,
                                  jint mode) {
        functions->ReleaseCharArrayElements(this,array,elems,mode);
    }
    void ReleaseShortArrayElements(jshortArray array,
                                   jshort *elems,
                                   jint mode) {
        functions->ReleaseShortArrayElements(this,array,elems,mode);
    }
    void ReleaseIntArrayElements(jintArray array,
                                 jint *elems,
                                 jint mode) {
        functions->ReleaseIntArrayElements(this,array,elems,mode);
    }
    void ReleaseLongArrayElements(jlongArray array,
                                  jlong *elems,
                                  jint mode) {
        functions->ReleaseLongArrayElements(this,array,elems,mode);
    }
    void ReleaseFloatArrayElements(jfloatArray array,
                                   jfloat *elems,
                                   jint mode) {
        functions->ReleaseFloatArrayElements(this,array,elems,mode);
    }
    void ReleaseDoubleArrayElements(jdoubleArray array,
                                    jdouble *elems,
                                    jint mode) {
        functions->ReleaseDoubleArrayElements(this,array,elems,mode);
    }

    void GetBooleanArrayRegion(jbooleanArray array,
                               jsize start, jsize len, jboolean *buf) {
        functions->GetBooleanArrayRegion(this,array,start,len,buf);
    }
    void GetByteArrayRegion(jbyteArray array,
                            jsize start, jsize len, jbyte *buf) {
        functions->GetByteArrayRegion(this,array,start,len,buf);
    }
    void GetCharArrayRegion(jcharArray array,
                            jsize start, jsize len, jchar *buf) {
        functions->GetCharArrayRegion(this,array,start,len,buf);
    }
    void GetShortArrayRegion(jshortArray array,
                             jsize start, jsize len, jshort *buf) {
        functions->GetShortArrayRegion(this,array,start,len,buf);
    }
    void GetIntArrayRegion(jintArray array,
                           jsize start, jsize len, jint *buf) {
        functions->GetIntArrayRegion(this,array,start,len,buf);
    }
    void GetLongArrayRegion(jlongArray array,
                            jsize start, jsize len, jlong *buf) {
        functions->GetLongArrayRegion(this,array,start,len,buf);
    }
    void GetFloatArrayRegion(jfloatArray array,
                             jsize start, jsize len, jfloat *buf) {
        functions->GetFloatArrayRegion(this,array,start,len,buf);
    }
    void GetDoubleArrayRegion(jdoubleArray array,
                              jsize start, jsize len, jdouble *buf) {
        functions->GetDoubleArrayRegion(this,array,start,len,buf);
    }

    void SetBooleanArrayRegion(jbooleanArray array, jsize start, jsize len,
                               const jboolean *buf) {
        functions->SetBooleanArrayRegion(this,array,start,len,buf);
    }
    void SetByteArrayRegion(jbyteArray array, jsize start, jsize len,
                            const jbyte *buf) {
        functions->SetByteArrayRegion(this,array,start,len,buf);
    }
    void SetCharArrayRegion(jcharArray array, jsize start, jsize len,
                            const jchar *buf) {
        functions->SetCharArrayRegion(this,array,start,len,buf);
    }
    void SetShortArrayRegion(jshortArray array, jsize start, jsize len,
                             const jshort *buf) {
        functions->SetShortArrayRegion(this,array,start,len,buf);
    }
    void SetIntArrayRegion(jintArray array, jsize start, jsize len,
                           const jint *buf) {
        functions->SetIntArrayRegion(this,array,start,len,buf);
    }
    void SetLongArrayRegion(jlongArray array, jsize start, jsize len,
                            const jlong *buf) {
        functions->SetLongArrayRegion(this,array,start,len,buf);
    }
    void SetFloatArrayRegion(jfloatArray array, jsize start, jsize len,
                             const jfloat *buf) {
        functions->SetFloatArrayRegion(this,array,start,len,buf);
    }
    void SetDoubleArrayRegion(jdoubleArray array, jsize start, jsize len,
                              const jdouble *buf) {
        functions->SetDoubleArrayRegion(this,array,start,len,buf);
    }

    jint RegisterNatives(jclass clazz, const JNINativeMethod *methods,
                         jint nMethods) {
        return functions->RegisterNatives(this,clazz,methods,nMethods);
    }
    jint UnregisterNatives(jclass clazz) {
        return functions->UnregisterNatives(this,clazz);
    }

    jint MonitorEnter(jobject obj) {
        return functions->MonitorEnter(this,obj);
    }
    jint MonitorExit(jobject obj) {
        return functions->MonitorExit(this,obj);
    }

    jint GetJavaVM(JavaVM **vm) {
        return functions->GetJavaVM(this,vm);
    }

    void GetStringRegion(jstring str, jsize start, jsize len, jchar *buf) {
        functions->GetStringRegion(this,str,start,len,buf);
    }
    void GetStringUTFRegion(jstring str, jsize start, jsize len, char *buf) {
        functions->GetStringUTFRegion(this,str,start,len,buf);
    }

    void * GetPrimitiveArrayCritical(jarray array, jboolean *isCopy) {
        return functions->GetPrimitiveArrayCritical(this,array,isCopy);
    }
    void ReleasePrimitiveArrayCritical(jarray array, void *carray, jint mode) {
        functions->ReleasePrimitiveArrayCritical(this,array,carray,mode);
    }

    const jchar * GetStringCritical(jstring string, jboolean *isCopy) {
        return functions->GetStringCritical(this,string,isCopy);
    }
    void ReleaseStringCritical(jstring string, const jchar *cstring) {
        functions->ReleaseStringCritical(this,string,cstring);
    }

    jweak NewWeakGlobalRef(jobject obj) {
        return functions->NewWeakGlobalRef(this,obj);
    }
    void DeleteWeakGlobalRef(jweak ref) {
        functions->DeleteWeakGlobalRef(this,ref);
    }

    jboolean ExceptionCheck() {
        return functions->ExceptionCheck(this);
    }

    jobject NewDirectByteBuffer(void* address, jlong capacity) {
        return functions->NewDirectByteBuffer(this, address, capacity);
    }
    void* GetDirectBufferAddress(jobject buf) {
        return functions->GetDirectBufferAddress(this, buf);
    }
    jlong GetDirectBufferCapacity(jobject buf) {
        return functions->GetDirectBufferCapacity(this, buf);
    }
    jobjectRefType GetObjectRefType(jobject obj) {
        return functions->GetObjectRefType(this, obj);
    }



    jobject GetModule(jclass clazz) {
        return functions->GetModule(this, clazz);
    }


};

typedef struct JavaVMOption {
    char *optionString;
    void *extraInfo;
} JavaVMOption;

typedef struct JavaVMInitArgs {
    jint version;

    jint nOptions;
    JavaVMOption *options;
    jboolean ignoreUnrecognized;
} JavaVMInitArgs;

typedef struct JavaVMAttachArgs {
    jint version;

    char *name;
    jobject group;
} JavaVMAttachArgs;
# 1901 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
struct JNIInvokeInterface_ {
    void *reserved0;
    void *reserved1;
    void *reserved2;

    jint ( *DestroyJavaVM)(JavaVM *vm);

    jint ( *AttachCurrentThread)(JavaVM *vm, void **penv, void *args);

    jint ( *DetachCurrentThread)(JavaVM *vm);

    jint ( *GetEnv)(JavaVM *vm, void **penv, jint version);

    jint ( *AttachCurrentThreadAsDaemon)(JavaVM *vm, void **penv, void *args);
};

struct JavaVM_ {
    const struct JNIInvokeInterface_ *functions;


    jint DestroyJavaVM() {
        return functions->DestroyJavaVM(this);
    }
    jint AttachCurrentThread(void **penv, void *args) {
        return functions->AttachCurrentThread(this, penv, args);
    }
    jint DetachCurrentThread() {
        return functions->DetachCurrentThread(this);
    }

    jint GetEnv(void **penv, jint version) {
        return functions->GetEnv(this, penv, version);
    }
    jint AttachCurrentThreadAsDaemon(void **penv, void *args) {
        return functions->AttachCurrentThreadAsDaemon(this, penv, args);
    }

};






__attribute__((visibility("default"))) jint
JNI_GetDefaultJavaVMInitArgs(void *args);

__attribute__((visibility("default"))) jint
JNI_CreateJavaVM(JavaVM **pvm, void **penv, void *args);

__attribute__((visibility("default"))) jint
JNI_GetCreatedJavaVMs(JavaVM **, jsize, jsize *);


__attribute__((visibility("default"))) jint
JNI_OnLoad(JavaVM *vm, void *reserved);

__attribute__((visibility("default"))) void
JNI_OnUnload(JavaVM *vm, void *reserved);
# 1970 "/usr/lib/jvm/java-11-openjdk-amd64//include/jni.h"
}
# 3 "./com_NativeInterface_NativeInterface.h" 2





extern "C" {






__attribute__((visibility("default"))) void Java_com_NativeInterface_NativeInterface_DS_1Version
  (JNIEnv *, jobject);


}
# 4 "./ds_wrapper.cpp" 2

__attribute__((visibility("default"))) void Java_NativeInterface_DS_Version(HNIENV *env, jobject thisObj) {
    char* version;

    version = DS_Version();
    fprintf("Version Equals %s", version);
    return;
}
